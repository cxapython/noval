version: '3.8'

services:
  # MySQL 数据库（保持不变，如需暴露宿主机端口可保留）
  mysql:
    image: mysql:8.0
    container_name: noval-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-novel_db}
      MYSQL_USER: ${MYSQL_USER:-novel_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-novel_pass123}
      TZ: Asia/Shanghai
    ports:
      - "${MYSQL_PORT:-3306}:3306"  # 如需隐藏可删除此行
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init_reader_tables.py:/docker-entrypoint-initdb.d/init.py:ro
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - noval-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root123456}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存（核心修改：移除宿主机端口映射，仅容器内使用6379）
  redis:
    image: redis:7-alpine
    container_name: noval-redis
    restart: always
    # 移除 ports 配置，避免占用宿主机6379端口
    volumes:
      - redis_data:/data
    networks:
      - noval-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端应用（保持不变，内部仍用6379连接Redis）
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noval-backend
    restart: always
    ports:
      - "${BACKEND_PORT:-5001}:5001"
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER:-novel_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-novel_pass123}
      DB_NAME: ${MYSQL_DATABASE:-novel_db}
      # Redis配置（保持6379端口，通过容器名通信）
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Flask配置
      FLASK_ENV: ${FLASK_ENV:-production}
      PYTHONUNBUFFERED: 1
      TZ: Asia/Shanghai
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./configs:/app/configs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - noval-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 前端服务器（保持不变）
  nginx:
    image: nginx:alpine
    container_name: noval-nginx
    restart: always
    ports:
      - "${FRONTEND_PORT:-80}:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - noval-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  noval-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local